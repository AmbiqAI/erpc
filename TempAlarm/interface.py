# Copyright (c) 2016, Freescale Semiconductor, Inc.
# Copyright 2016-2017 NXP
# All rights reserved.
#
#
# SPDX-License-Identifier: BSD-3-Clause

#
# Generated by erpcgen 1.9.1 on Mon Aug 22 09:57:09 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

#Calls from Linux to M4.
class ITemp(object):
    SERVICE_ID = 1
    ADD_SENSOR_ID = 1
    REMOVE_SENSOR_ID = 2
    SET_INTERVAL_ID = 3
    SET_ALARM_ID = 4
    ENABLE_ALARM_ID = 5
    DISABLE_ALARM_ID = 6
    GET_ONE_SENSOR_ID = 7
    GET_ALL_SENSORS_B_ID = 8
    SAVE_SETTINGS_ID = 9
    LOAD_SETTINGS_ID = 10
    READ_ONE_SENSOR_ID = 11
    READ_SENSORS_ID = 12

    def add_sensor(self, address):
        raise NotImplementedError()

    def remove_sensor(self, address):
        raise NotImplementedError()

    def set_interval(self, address, interval):
        raise NotImplementedError()

    def set_alarm(self, address, alarmType, alarmTemp):
        raise NotImplementedError()

    def enable_alarm(self, address, alarmType):
        raise NotImplementedError()

    def disable_alarm(self, address, alarmType):
        raise NotImplementedError()

    def get_one_sensor(self, address):
        raise NotImplementedError()

    def get_all_sensors_b(self):
        raise NotImplementedError()

    def save_settings(self):
        raise NotImplementedError()

    def load_settings(self, savedState):
        raise NotImplementedError()

   #Reads one sensor synchronously.
    def read_one_sensor(self, address):
        raise NotImplementedError()

   #Sends read_results() asynchronously.
    def read_sensors(self, addresses):
        raise NotImplementedError()


#Asynchronous events from M4 to Linux.
class ITempAsync(object):
    SERVICE_ID = 2
    ALARM_FIRED_ID = 1
    READ_RESULTS_ID = 2

   #Void return so we can verify the message was received.
    def alarm_fired(self, addr, temp):
        raise NotImplementedError()

   #Oneway since it's less important than an alarm.
    def read_results(self, results):
        raise NotImplementedError()


