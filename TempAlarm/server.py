# Copyright (c) 2016, Freescale Semiconductor, Inc.
# Copyright 2016-2017 NXP
# All rights reserved.
#
#
# SPDX-License-Identifier: BSD-3-Clause

#
# Generated by erpcgen 1.9.1 on Mon Aug 22 09:57:09 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for Temp
class TempService(erpc.server.Service):
    def __init__(self, handler):
        super(TempService, self).__init__(interface.ITemp.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.ITemp.ADD_SENSOR_ID: self._handle_add_sensor,
                interface.ITemp.REMOVE_SENSOR_ID: self._handle_remove_sensor,
                interface.ITemp.SET_INTERVAL_ID: self._handle_set_interval,
                interface.ITemp.SET_ALARM_ID: self._handle_set_alarm,
                interface.ITemp.ENABLE_ALARM_ID: self._handle_enable_alarm,
                interface.ITemp.DISABLE_ALARM_ID: self._handle_disable_alarm,
                interface.ITemp.GET_ONE_SENSOR_ID: self._handle_get_one_sensor,
                interface.ITemp.GET_ALL_SENSORS_B_ID: self._handle_get_all_sensors_b,
                interface.ITemp.SAVE_SETTINGS_ID: self._handle_save_settings,
                interface.ITemp.LOAD_SETTINGS_ID: self._handle_load_settings,
                interface.ITemp.READ_ONE_SENSOR_ID: self._handle_read_one_sensor,
                interface.ITemp.READ_SENSORS_ID: self._handle_read_sensors,
            }

    def _handle_add_sensor(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.add_sensor(address)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.ADD_SENSOR_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_remove_sensor(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.remove_sensor(address)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.REMOVE_SENSOR_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_set_interval(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()
        interval = codec.read_float()

        # Invoke user implementation of remote function.
        _result = self._handler.set_interval(address, interval)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.SET_INTERVAL_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_set_alarm(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()
        alarmType = codec.read_uint32()
        alarmTemp = codec.read_float()

        # Invoke user implementation of remote function.
        _result = self._handler.set_alarm(address, alarmType, alarmTemp)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.SET_ALARM_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_enable_alarm(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()
        alarmType = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.enable_alarm(address, alarmType)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.ENABLE_ALARM_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_disable_alarm(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()
        alarmType = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.disable_alarm(address, alarmType)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.DISABLE_ALARM_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_get_one_sensor(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.get_one_sensor(address)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.GET_ONE_SENSOR_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_get_all_sensors_b(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.get_all_sensors_b()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.GET_ALL_SENSORS_B_ID,
            sequence=sequence))
        codec.start_write_list(len(_result))
        for _i0 in _result:
            _i0._write(codec)


    def _handle_save_settings(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.save_settings()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.SAVE_SETTINGS_ID,
            sequence=sequence))
        codec.write_binary(_result)

    def _handle_load_settings(self, sequence, codec):
        # Read incoming parameters.
        savedState = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.load_settings(savedState)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.LOAD_SETTINGS_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_read_one_sensor(self, sequence, codec):
        # Read incoming parameters.
        address = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.read_one_sensor(address)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.READ_ONE_SENSOR_ID,
            sequence=sequence))
        codec.write_float(_result)

    def _handle_read_sensors(self, sequence, codec):
        # Read incoming parameters.
        _n0 = codec.start_read_list()
        addresses = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            addresses.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.read_sensors(addresses)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITemp.SERVICE_ID,
            request=interface.ITemp.READ_SENSORS_ID,
            sequence=sequence))
        codec.write_bool(_result)


# Client for TempAsync
class TempAsyncService(erpc.server.Service):
    def __init__(self, handler):
        super(TempAsyncService, self).__init__(interface.ITempAsync.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.ITempAsync.ALARM_FIRED_ID: self._handle_alarm_fired,
                interface.ITempAsync.READ_RESULTS_ID: self._handle_read_results,
            }

    def _handle_alarm_fired(self, sequence, codec):
        # Read incoming parameters.
        addr = codec.read_uint8()
        temp = codec.read_float()

        # Invoke user implementation of remote function.
        self._handler.alarm_fired(addr, temp)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ITempAsync.SERVICE_ID,
            request=interface.ITempAsync.ALARM_FIRED_ID,
            sequence=sequence))

    def _handle_read_results(self, sequence, codec):
        # Read incoming parameters.
        _n0 = codec.start_read_list()
        results = []
        for _i0 in range(_n0):
            _v0 = common.SensorReadResult()._read(codec)
            results.append(_v0)


        # Invoke user implementation of remote function.
        self._handler.read_results(results)


