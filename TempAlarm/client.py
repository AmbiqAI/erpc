# Copyright (c) 2016, Freescale Semiconductor, Inc.
# Copyright 2016-2017 NXP
# All rights reserved.
#
#
# SPDX-License-Identifier: BSD-3-Clause

#
# Generated by erpcgen 1.9.1 on Mon Aug 22 09:57:09 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for Temp
class TempClient(interface.ITemp):
    def __init__(self, manager):
        super(TempClient, self).__init__()
        self._clientManager = manager

    def add_sensor(self, address):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ADD_SENSOR_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def remove_sensor(self, address):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.REMOVE_SENSOR_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def set_interval(self, address, interval):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.SET_INTERVAL_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)
        if interval is None:
            raise ValueError("interval is None")
        codec.write_float(interval)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def set_alarm(self, address, alarmType, alarmTemp):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.SET_ALARM_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)
        if alarmType is None:
            raise ValueError("alarmType is None")
        codec.write_uint32(alarmType)
        if alarmTemp is None:
            raise ValueError("alarmTemp is None")
        codec.write_float(alarmTemp)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def enable_alarm(self, address, alarmType):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ENABLE_ALARM_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)
        if alarmType is None:
            raise ValueError("alarmType is None")
        codec.write_uint32(alarmType)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def disable_alarm(self, address, alarmType):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.DISABLE_ALARM_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)
        if alarmType is None:
            raise ValueError("alarmType is None")
        codec.write_uint32(alarmType)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def get_one_sensor(self, address):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GET_ONE_SENSOR_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.SensorInfo()._read(codec)
        return _result

    def get_all_sensors_b(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.GET_ALL_SENSORS_B_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _n0 = codec.start_read_list()
        _result = []
        for _i0 in range(_n0):
            _v0 = common.SensorInfo()._read(codec)
            _result.append(_v0)

        return _result

    def save_settings(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.SAVE_SETTINGS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_binary()
        return _result

    def load_settings(self, savedState):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.LOAD_SETTINGS_ID,
                sequence=request.sequence))
        if savedState is None:
            raise ValueError("savedState is None")
        codec.write_binary(savedState)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def read_one_sensor(self, address):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.READ_ONE_SENSOR_ID,
                sequence=request.sequence))
        if address is None:
            raise ValueError("address is None")
        codec.write_uint8(address)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_float()
        return _result

    def read_sensors(self, addresses):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.READ_SENSORS_ID,
                sequence=request.sequence))
        if addresses is None:
            raise ValueError("addresses is None")
        codec.start_write_list(len(addresses))
        for _i0 in addresses:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result


# Client for TempAsync
class TempAsyncClient(interface.ITempAsync):
    def __init__(self, manager):
        super(TempAsyncClient, self).__init__()
        self._clientManager = manager

    def alarm_fired(self, addr, temp):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ALARM_FIRED_ID,
                sequence=request.sequence))
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint8(addr)
        if temp is None:
            raise ValueError("temp is None")
        codec.write_float(temp)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def read_results(self, results):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.READ_RESULTS_ID,
                sequence=request.sequence))
        if results is None:
            raise ValueError("results is None")
        codec.start_write_list(len(results))
        for _i0 in results:
            _i0._write(codec)


        # Send request.
        self._clientManager.perform_request(request)


