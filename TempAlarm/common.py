# Copyright (c) 2016, Freescale Semiconductor, Inc.
# Copyright 2016-2017 NXP
# All rights reserved.
#
#
# SPDX-License-Identifier: BSD-3-Clause

#
# Generated by erpcgen 1.9.1 on Mon Aug 22 09:57:09 2022.
#
# AUTOGENERATED - DO NOT EDIT
#


# Enumerators data types declarations
class AlarmType:
    kHighAlarm = 0
    kLowAlarm = 1
    kBothAlarms = 2 #Only used for enable/disable.


# Structures data types declarations
class AlarmInfo(object):
    def __init__(self, temp=None, enabled=None):
        self.temp = temp # float
        self.enabled = enabled # bool

    def _read(self, codec):
        self.temp = codec.read_float()
        self.enabled = codec.read_bool()
        return self

    def _write(self, codec):
        if self.temp is None:
            raise ValueError("temp is None")
        codec.write_float(self.temp)
        if self.enabled is None:
            raise ValueError("enabled is None")
        codec.write_bool(self.enabled)

    def __str__(self):
        return "<%s@%x temp=%s enabled=%s>" % (self.__class__.__name__, id(self), self.temp, self.enabled)

    def __repr__(self):
        return self.__str__()

class SensorInfo(object):
    def __init__(self, address=None, readInterval=None, highAlarm=None, lowAlarm=None):
        self.address = address # uint8
        self.readInterval = readInterval # float
        self.highAlarm = highAlarm # AlarmInfo
        self.lowAlarm = lowAlarm # AlarmInfo

    def _read(self, codec):
        self.address = codec.read_uint8()
        self.readInterval = codec.read_float()
        self.highAlarm = AlarmInfo()._read(codec)
        self.lowAlarm = AlarmInfo()._read(codec)
        return self

    def _write(self, codec):
        if self.address is None:
            raise ValueError("address is None")
        codec.write_uint8(self.address)
        if self.readInterval is None:
            raise ValueError("readInterval is None")
        codec.write_float(self.readInterval)
        if self.highAlarm is None:
            raise ValueError("highAlarm is None")
        self.highAlarm._write(codec)
        if self.lowAlarm is None:
            raise ValueError("lowAlarm is None")
        self.lowAlarm._write(codec)

    def __str__(self):
        return "<%s@%x address=%s readInterval=%s highAlarm=%s lowAlarm=%s>" % (self.__class__.__name__, id(self), self.address, self.readInterval, self.highAlarm, self.lowAlarm)

    def __repr__(self):
        return self.__str__()

class SensorReadResult(object):
    def __init__(self, address=None, temp=None):
        self.address = address # uint8
        self.temp = temp # float

    def _read(self, codec):
        self.address = codec.read_uint8()
        self.temp = codec.read_float()
        return self

    def _write(self, codec):
        if self.address is None:
            raise ValueError("address is None")
        codec.write_uint8(self.address)
        if self.temp is None:
            raise ValueError("temp is None")
        codec.write_float(self.temp)

    def __str__(self):
        return "<%s@%x address=%s temp=%s>" % (self.__class__.__name__, id(self), self.address, self.temp)

    def __repr__(self):
        return self.__str__()

