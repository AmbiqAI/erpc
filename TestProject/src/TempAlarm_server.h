/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 *
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.9.1 on Thu Aug 18 10:53:47 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_TempAlarm_server_h_)
#define _TempAlarm_server_h_

#ifdef __cplusplus
#include "erpc_server.hpp"
#include "erpc_codec.hpp"
extern "C"
{
#include "TempAlarm.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for Temp.
 */
class Temp_service : public erpc::Service
{
public:
    Temp_service() : Service(kTemp_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for add_sensor of Temp interface. */
    erpc_status_t add_sensor_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for remove_sensor of Temp interface. */
    erpc_status_t remove_sensor_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for set_interval of Temp interface. */
    erpc_status_t set_interval_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for set_alarm of Temp interface. */
    erpc_status_t set_alarm_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for enable_alarm of Temp interface. */
    erpc_status_t enable_alarm_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for disable_alarm of Temp interface. */
    erpc_status_t disable_alarm_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for get_one_sensor of Temp interface. */
    erpc_status_t get_one_sensor_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for get_all_sensors_b of Temp interface. */
    erpc_status_t get_all_sensors_b_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for save_settings of Temp interface. */
    erpc_status_t save_settings_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for load_settings of Temp interface. */
    erpc_status_t load_settings_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for read_one_sensor of Temp interface. */
    erpc_status_t read_one_sensor_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for read_sensors of Temp interface. */
    erpc_status_t read_sensors_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for TempAsync.
 */
class TempAsync_service : public erpc::Service
{
public:
    TempAsync_service() : Service(kTempAsync_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for alarm_fired of TempAsync interface. */
    erpc_status_t alarm_fired_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for read_results of TempAsync interface. */
    erpc_status_t read_results_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "TempAlarm.h"
#endif // __cplusplus

typedef void * erpc_service_t;

erpc_service_t create_Temp_service(void);

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
void destroy_Temp_service(erpc_service_t service);
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
void destroy_Temp_service(void);
#else
#warning "Unknown eRPC allocation policy!"
#endif

erpc_service_t create_TempAsync_service(void);

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
void destroy_TempAsync_service(erpc_service_t service);
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
void destroy_TempAsync_service(void);
#else
#warning "Unknown eRPC allocation policy!"
#endif

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _TempAlarm_server_h_
